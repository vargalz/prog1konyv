<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
Az unáris számrendszer csak egyesekből áll. Decimálsból úgy váltunk át egy számot, hogy annyi egyest -a programunkban vonalat- írunk, amennyi a szám értéke. Hogy egyszerűbb legyen kiolvasni az unáris értéket minden 5 vonal után teszünk egy szóközt.
<programlisting><![CDATA[
#include <iostream>

int main()
{
	int szam;
	int vonal = 0;
	std::cout<<"Adj meg egy szamot!\n";
	std::cin >> szam;
	std::cout<<"Unárisban:\n";
	for (int i = 0; i < szam; ++i)
	{
		std::cout<<"|";
		++vonal;
		if (vonal % 5 == 0) 
	std::cout<<" ";
	}
	std::cout<<'\n';
	return 0;
}
]]></programlisting>
</para>
<para>
A programunk először bekér egy decimális számot. For ciklussal 1-től a bekért számig megy, és minden kiírt vonal után növeli a számot eggyel. Minden lépésnél megnézzük hogy a szám osztható-e öttel, ha igen akkor a programm rak egy szóközt.
</para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
Noam Chomsky, amerikai nyelvész volt, aki javasolta a generatív nylevek formalizálását. Nevéhez fűződik még a generítív nyelvtanok csoportosítása, melyek közül a környezetfüggőről (1.típus) lesz szó.
</para>
<para>
<programlisting>
S, X, Y - változók
a, b, c - konstansok
S → abc, S → aXbc, Xb → bX, Xc → Ybcc, bY → Yb, aY -> aaX, aY → aa
S-ből indulunk.
                S (S → aXbc)
                aXbc (Xb → bX)
                abXc (Xc → Ybcc)
                abYbcc (bY → Yb)
                aYbbcc (aY -> aaX)
                aaXbbcc (Xb → bX)
                aabXbcc (Xb → bX)
                aabbXcc (Xc → Ybcc)
                aabbYbccc (bY → Yb)
                aabYbbccc (bY → Yb)
                aaYbbbccc (aY → aa)
                aaabbbccc 
</programlisting>
<programlisting>
A, B, C - változók
a, b, c - konstansok
A → aAB, A → aC, CB → bCc, cB → Bc, C → bc
A-ból indulunk
                A (A → aAB)
                aAB ( A → aAB)
                aaABB ( A → aAB)
                aaaABBB ( A → aC)
                aaaaCBBB (CB → bCc)
                aaaabCcBB (cB → Bc)
                aaaabCBcB (cB → Bc)
                aaaabCBBc (CB → bCc)
                aaaabbCcBc (cB → Bc)
                aaaabbCBcc (CB → bCc)
                aaaabbbCccc (C → bc)
                aaaabbbbcccc 
            </programlisting>

</para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
A C89-es szabványban nem létezik egysoros komment, ezért ha írunk egy programot ami tartalmaz ilyen kommentet, az C99-ben lefordul, de C89-ben nem.
</para>
<programlisting><![CDATA[int main()
{
return 0; //komment
}]]></programlisting>
<para>
A programunk fordításánál használjuk az "-std=c89" majd az "-std=c99" kapcsolót, hogy megnézzük valóban működik-e C99-ben.
</para>
<para>
C89-ben a for ciklus kezdőértékét a cikluson kívül kell deklarálnunk, C99-ben cikluson belül is megengedhető.
</para>
<programlisting><![CDATA[int main()
{
for(int i=1; i<10; i++)
return 0;
}]]></programlisting>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
A lex program segítségével készítünk egy lexikális elemző szabályok megadásával. Szövegfájlból olvas be és C forráskódot készít.
<programlisting><![CDATA[
%{
#include <stdio.h>
int realnumbers = 0;
%}
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%
int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}
]]></programlisting>

</para>
<para>
Fordítás és futtatás:
<programlisting>
                $ lex -o lexikalis.c lexikalis.l
                $ gcc lexikalis.c -o lexikalis
                $ ./lexikalis
</programlisting>

</para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
A leet nyelv lényege, hogy a betűket kinézetre hasonló számokkal vagy más karakterekkel helyettesítjük.
</para>
<para>
Mint az előző feladatban, itt is a lex-et fogjuk ígénybe venni.
</para>
<para>
<programlisting><![CDATA[
%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "4", "4"}},
  {'b', {"13", "8", "|3", "|}"}},
  {'c', {"[", "(", "<", "{"}},
  {'d', {"|>", "|)", "|]", "|}"}},
  {'e', {"3", "€", "₤", "£"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"C-", "6", "[", "[+"}},
  {'h', {"|+|", "4", "|-|", "[-]"}},
  {'i', {"1", "9", "|", "!"}},
  {'j', {"_)", "_7", "_|", "_/"}},
  {'k', {"I{", "|<", "1<", "|{"}},
  {'l', {"][", "1", "|", "|_"}},
  {'m', {"^^", "44", "|V|", "(V)"}},
  {'n', {"][\\][", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "oh", "()", "[]"}},
  {'p', {"|7", "/o", "|D", "|o"}},
  {'q', {"kw", "9", "O_", "(,)"}},
  {'r', {".-", "I2", "12", "|2"}},
  {'s', {"s", "5", "$", "§"}},
  {'t', {"+", "7", "7", "'|'"}},
  {'u', {"{_}", "|_|", "(_)", "[_]"}},
  {'v', {"\\//", "\\/", "\\/", "\\/"}},
  {'w', {"2u", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"><", "%", ")(", ")("}},
  {'y', {"y", "y", "y", "y"}},
  {'z', {"5", "2", "7_", ">_"}},
  
  {'0', {"D", " ", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "e", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "J", "J"}}
  };
  
%}
%%
.	{
	  
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
]]></programlisting>
Láthatjuk, hogy létrehozunk egy cipher struktrúrát, amely a megadott karakterekhez rendel egy négyelemű tömböt, amely a helyettesítési értéket fogja tartalmazni.
</para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
Ha nem hagyja figyelmen kívül a jelet, akkor a jelkezelő függvénynek átadjuk.
</para>
<para>
Az második és harmadik kódcsipet ugyanazt az eredményt fogja visszaadni.
</para>
<para>
A negyedik csipet viszont már bugos. A "tomb[i] = i++" bal oldala az i-t a tömb indexeként használja fel a jobb oldal az i-t pedig növeli. A problémát az okozza, hogy nem ismerjük a végrehajtás sorrednjét, így ez hibás eredményhez vezethet.
</para>
<para>
Az ötödik kódban a probléma forrása az <function><![CDATA[&&]]></function> operátor jobb oldala. Mivel <function><![CDATA[==]]></function> helyett <function><![CDATA[=]]></function>-t használunk, így nem összehasonlítunk, hanem értéket adunk ami nem boolean típusú lesz.
</para>
<para>
A hatodik forrásban az f függvény két egészet kap, de a kiértékel sorrendjét nem ismerjük, ezért ez a kód is hibás eredményhez vezet.
</para>
<para>
A hetedik kód megfelelően működik. Először  kiírja a függvény által a módosított értéket, majd a kezdőértéket.
</para>
<para>
Az utolsó kódcsipetben a printf két egészet fog kiírni. Az <function>f</function> függvény megkap egy memóriacímet, és az itt található értékkel fog dolgozni. A második számunk egy sima változó.
</para>
    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<para>
Először is nézzük meg,hogy mely kifejezés mit is jelent.
</para>
<para>
<function>\forall</function>: univerzális kvantor (minden)
</para>
<para>
<function>\exist</function>: egzisztenciális kvantor (van olyan)
</para>
<para>
<function>\wedge</function>: implikáció ("ha..., akkor...")
</para>
<para>
<function>\supset</function>: konjunkció (és)
</para>
<para>
<function>S</function>: ez arnyelvben a rákővetkező függvény
</para>
<para>
<function>\text</function>: szöveg kiírása
</para>
<para>
Most hogy tisztában vagyunk a jelentésekkel, vessünk egy pillantást a feladatra.
</para>
<para>
1. Minden x-re létezik olyan y, amelynél ha x kisebb, akkor y prím. -> Végtelen sok prímszám van.
</para>
<para>
2. Minden x-re létezik olyan y, amelynél ha x kisebb, akkor y prím, és ha y prím, akkor annak második rákövetkezője is prím. -> Végtelen sok ikerprím van
</para>
<para>
3. Létezik olyan y, amelyhez minden x esetén az x prím ,és x kisebb, mint y. -> Véges sok prím van
</para>
<para>
4. Létezik olyan y, amelyhez minden x esetén az x nagyobb, és x nem prím. -> Véges sok prím van
</para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
<programlisting><![CDATA[int a;]]></programlisting>
<para>
Egy egészet vezet be.
</para>
<programlisting><![CDATA[int *b = &a;]]></programlisting> 
<para>
Ez egy egészre mutattó mutató
</para>
<programlisting><![CDATA[int &r = a;]]></programlisting> 
<para>
Egy egész referenciáját vezeti be a programba. A referencia értéke ugyanaz mint az egészé.
</para>
<programlisting><![CDATA[int c[5];]]></programlisting>
<para>
Egy ötelemű egészekből álló tömb.
</para>
<programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting> 
<para>
Ötelemű egészekből álló tömb refernciája. Az összes elem referenciája, nem csak az első elemé.
</para>
<programlisting><![CDATA[int *d[5];]]></programlisting>
<para>
Egészekre mutató mutatók tömbje.
</para>
 <programlisting><![CDATA[int *h ();]]></programlisting> 
<para>
Ez egy függvény ami, egészre mutató mutatót ad vissza.
</para>
<programlisting><![CDATA[int *(*l) ();]]></programlisting>
<para>
Ez a függvény egy egészre mutató mutatót visszaadó függvényre mutató mutató
</para>
<programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>
<para>
Egészet visszaadó és két egészet beolvasó függvényre mutató mutatót visszaadó és egészet kapó függvény.
</para>
<programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
<para>
Függvénymutató az előbbivel azonos függvényre.
</para>
    </section>                     

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
